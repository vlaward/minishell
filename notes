ALORS :

legende :
[ ] = A faire
[~] = En cours
[X] = Fait

Ce qu il reste a faire !
-les built-in 		(check : [ ])
-les signaux 		(check : [x])<= a verifier mais tout a l'air bon
-le $?				(check : [ ])<= utiliser notre export ? et
									mettre l'env '?' a WEXITEDSTATUS
-verifer les free	(check : [~])

-update les define, mettre un define pour les flags de open
-si il n'y a pas d'env le path marche pas donc il faut le gerer dans l'exec
-REPLACE !strcmp pars strcmp == 0. Pars ce que le resultat peu etre negatif
-remplacer TOUT les printfs
-si $ n'as rien derriere il n'est pas expend  (ex : "echo $" ; "$")\
-verifier avec access avant de executer voir en bas laa
-si 'environement est plus gros quye la taille donne quand tu lance ston bahs que nique sa mere. Donc si acess me dit oui, mais que exec me dit non. C'est pas le meme code d'erreur ! Voila pourquoi access
- que "cat << a | ls " marche
====================================

subtree commands : (exemple[libft])
	git subtree pull --prefix libft/ git@github.com:vlaward/libft.git main --squash
	git subtree push --prefix libft/ git@github.com:vlaward/libft.git main

git branchs : (not sure about that. Modifie stv, je coco pas nn plus)
branchs list normalement :
    ->main   ;   Nahla    ;   Maya
  command :
    git branch <name> == ajoute une branche
    git checkout <name> == tu passe sur la branche 'name'
    git branch --list == self explenatory
    git merge <branch> == merge la branche "branch" dans la branche actuel (souvent main du coup)
     	
notes :
-les getenv, pas besoin de les free pars ce que ca pointe vers un endroit dans la memoire deja
-perrror regle beaucoup de probleme 


REMEMBER : J'en suis a verifier les erreur dans redirects. En train de verifier le retour de trim et la facon dont c'est gere.
	->"cat << EOF" apres deux itteration ca plante. (see valgrind) (limiter.c:36) (hisotique pars ce qu'on est pas des putes !!!)
	franchement s'ut ete plus simple de faire des putains de structures mais bon... alright

=======================================

NAHLA (je fait chier de ouf) :
-gerer les signaux pendant l'execution des pipes (en soit inutil mais ca demande rien et c'est plus beau)


AXEL :
- gerer le $$ et $_
- gerer l'etat terminal (ouvrir vim , dans un terminal exteren pkill -KILL vim )
-les wildcards c'est pas mandatory mais c'est cool (un truc genre open pwd)


ft_testacces
{
	 cmd env (PATH)

	acces(cmd);
	1 = exec;
	0 = {
		while (path[i])
		{
			tmp = strjoin(path[i], cmd);
			acces(tmp);
			1 = exec tmp ;
		}
	}
}

===============================

FAIT ???

-ignore signal pend |ant que enfatn se faite sur e main :DDD (ex m inishell dans minshell dans minishell mon cukl. Ca fait des \n\n\n\nn\)
-remplacer les "== ' '" pars des "is_whitespace" et pareil pour certains tokkens 
-l;es vartaibl;es d'environements dan s le here doc mais pas les guillemets. Verifier ce qui en decoule dans env_handler
-<< a gerer en meme temps que les autres redisrects. remettre le tty en entree standart entre chaqeus redirects
-tester le here doc sans rien
-GERER LA CREATION DE L'ENIRONEMENT. CLONER L'EXISTANT OU CHYERCHER LES INFOS : "env -i bash" pui "env" et voir ce qui est recup
-"env -i ./minishell" regarder avec bash. Il y a un environement minimum au lancement.
-PASSER L'ENV PARTOUT ET FIRE UYN GETENV PARTICULIER !!!!!
-incrementer $SHLVL
